trainer:
  accelerator: cuda
  devices: null #(int or [])
  strategy: ddp
  num_sanity_val_steps: 2
  profiler: null #(string)
  verbose: True # print validation results in console

inferer:

exporter:
  export_weights: "test" #(string)
  # export_save_directory: null #(string)
  export_image_size: [256, 256]
  export_model_name: null #(string)
  onnx:
    opset_version: 12
    dynamic_axes: null #(dict)
  openvino:
    data_type: "FP16"
    reverse_input_channels: True
    scale_values: [58.395, 57.120, 57.375]
    mean_values: [123.675, 116.28, 103.53]
  blobconverter:
    data_type: "FP16"
    shaves: 6
    openvino_version: 2022.1

logger:
  project_name: null #(string)
  run_name: null #(string)
  save_directory: null #(string)
  is_tensorboard: True 
  is_wandb: False
  wandb_entity: null #(string)
  is_mlflow: False
  mlflow_tracking_uri: null #(string)
  is_sweep: False
  logged_hyperparams: ["train.epochs", "train.batch_size"]

dataset:
  local_path: /home/klemen/fiftyone/coco-oid/ #(string)
  s3_path: null #(string)
  train_view: "train"
  val_view: "val"

train:
  preprocessing:
    train_image_size: [256, 256]
    train_rgb: True
    # normalize:
    #   use_normalize: True
    #   params:
    augmentations:
      - name: Rotate
        params:
         - limit: 15
      - name: Rotate2
        params:
          - limit2: 10
          - limit22: 10

  batch_size: 32
  accumulate_grad_batches: 2
  epochs: 100
  num_workers: 2
  train_metrics_interval: 2
  validation_interval: 1
  skip_last_batch: True

  callbacks:
    use_device_stats_monitor: False
    model_checkpoint:
      save_top_k: 3
    early_stopping:
      monitor: val_loss
      mode: min
      patience: 3
      verbose: True

  optimizers:
    optimizer:
      name: Adam
      params:
        lr: 0.001
        weight_decay: 0.01
    scheduler:
      name: LinearLR
      params:
        start_factor: 0.33
  
  # freeze_modules:
  #   backbone: False
  #   neck: False
  #   heads: [False]

  # losses:
  #   weights: [1,1]


model:
  name: YoloV6-n
  type: #YoloV6-n # uncomment this to use predefined model
  pretrained:
  params: # only take into account if using predefined model
    n_classes: 10

  backbone:
    name: EfficientRep
    pretrained:
    params:
      channels_list: [64, 128, 256, 512, 1024]
      num_repeats: [1, 6, 12, 18, 6]
      depth_mul: 0.33
      width_mul: 0.25

  neck:
    name: RepPANNeck
    params:
      channels_list: [256, 128, 128, 256, 256, 512]
      num_repeats: [12, 12, 12, 12]
      depth_mul: 0.33
      width_mul: 0.25

  heads:
    - name: YoloV6Head
      params:
        n_classes: 1
        n_layers: 3
        reg_max: 0
      loss: 
        name: YoloV6Loss
        params:
         n_classes: 1
         iou_type: siou
    - name: YoloV6Head
      params:
        n_classes: 1
        n_layers: 3
        reg_max: 0
      loss: 
        name: YoloV6Loss
        params:
          n_classes: 1
          iou_type: siou

  additional_heads:
    - name: SegmentationHead
      params:
        n_classes: 2
      loss: 
        name: CrossEntropyLoss
        params: 