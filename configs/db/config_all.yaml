trainer:
  accelerator: auto # either "cpu" or "gpu, if "auto" then we check which is available (string)
  devices: null # either specify how many devices (int) or which specific devices (list) to use. If null then use all available. (string|null)
  strategy: ddp # if null then no distributed learning is used else ddp (strin|null)
  num_sanity_val_steps: 2 # number of sanity validation steps performed before training (int)
  profiler: null # use PL profiler for GPU/CPU/RAM utilization analysis (string|null)
  verbose: True # print validation results in console (bool)

logger:
  project_name: null # name of the project used for logging (string)
  run_name: null # name of the run, if empty then auto-generate (string|null)
  save_directory: output # path to the save directory (string)
  is_tensorboard: True # bool if use tensorboard (bool)
  is_wandb: False # bool if use WanDB (bool)
  wandb_entity: null # name of WanDB entity (string|null)
  is_mlflow: False # bool if use MLFlow (bool)
  mlflow_tracking_uri: null # name of MLFlow tracking uri (string|null)
  # is_sweep: False # bool if is sweep (not implemented) (bool)
  logged_hyperparams: ["train.epochs", "train.batch_size", "train.optimizers.optimizer.params.lr"] # list of hyperparameters to log (list)

dataset:
  local_path: null # path to local dataset (string|null)
  s3_path: null # path to s3 bucket (string|null)
  train_view: train # view to use for training (string)
  val_view: val # view to use for validation (string)
  test_view: test # view to use for testing (string)

train:
  preprocessing:
    train_image_size: [256, 256] # image size used for training [height, width] (list)
    train_rgb: True # bool if train on rgb or bgr (bool)
    normalize:
      use_normalize: True # bool if use normalization (bool)
      params: # params for normalization (dict|null)
    augmentations: # list of Albumentations augmentations
      # - name: Rotate
      #   params:
      #    - limit: 15
      # - name: Rotate2
      #   params:
      #     - limit2: 10
      #     - limit22: 10

  batch_size: 32 # batch size used for trainig (int)
  accumulate_grad_batches: 2 # number of batches for gradient accumulation (int)
  epochs: 100 # number of training epochs (int)
  num_workers: 2 # number of workers for data loading (int)
  train_metrics_interval: 2 # frequency of computing metrics on train data (int)
  validation_interval: 1 # frequency of computing metrics on validation data (int)
  skip_last_batch: True # bool if skip last batch while training (bool)

  callbacks: # callback specific parameters (check PL docs)
    use_device_stats_monitor: False
    model_checkpoint:
      save_top_k: 3
    early_stopping:
      active: True
      monitor: val_loss
      mode: min
      patience: 3
      verbose: True

  optimizers: # optimizers specific parameters (check Pytorch docs)
    optimizer:
      name: Adam
      params:
        lr: 0.001
        weight_decay: 0.01
    scheduler:
      name: ConstantLR
      params:
        factor: 1
  
  freeze_modules: # defines which modules you want to freeze (not train)
    backbone: False # bool if freeze backbone (bool)
    neck: False # bool if freeze neck (bool)
    heads: [False] # list of bools for specific head freeeze (list[bool])

  losses: # defines weights for losses in multi-head architecture
    weights: [1,1] # list of ints for specific loss weight (list[int])
    # learn_weights: False # bool if weights should be learned (not implemented yet) (bool)

inferer:
  dataset_view: val # view to use for inference (string)

exporter:
  export_weights: null # path to local weights used for export (string)
  export_save_directory: output_export # path to save directory of exported models (string)
  export_image_size: [256, 256] # image size used for export [height, width] (list)
  export_model_name: model # name of the exported model (string)
  onnx: 
    opset_version: 12 # opset version of onnx used (int)
    dynamic_axes: null # define if dynamic input shapes are used (dict)
  openvino:
    data_type: FP16 # data type used for openVino conversion (string)
    reverse_input_channels: True # bool if reverse input shapes (bool)
    scale_values: [58.395, 57.120, 57.375] # list of scale values (list[int|float])
    mean_values: [123.675, 116.28, 103.53] # list of mean values (list[int|float])
  blobconverter:
    data_type: FP16 # data type used for blob conversion (string)
    shaves: 6 # number of shaves used (int)
    openvino_version: 2022.1 # openvino version (string)